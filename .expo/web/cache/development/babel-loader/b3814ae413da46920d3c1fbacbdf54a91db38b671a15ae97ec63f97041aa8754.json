{"ast":null,"code":"import StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { useState } from \"react\";\nimport { WebView } from \"react-native-webview\";\nimport HeaderNavigate from \"../HeaderNavigate\";\nimport { useRoute } from \"@react-navigation/native\";\nimport Loading from \"../utils/Loading\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar NewsViewer = function NewsViewer() {\n  var route = useRoute();\n  var uri = route.params.uri;\n  var shouldStartLoadWithRequest = function shouldStartLoadWithRequest(event) {\n    return event.url === uri;\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(HeaderNavigate, {}), _jsx(WebView, {\n      source: {\n        uri: uri\n      },\n      scrollEnabled: true,\n      onShouldStartLoadWithRequest: shouldStartLoadWithRequest,\n      maximumZoomScale: 1,\n      minimumZoomScale: 1,\n      startInLoadingState: true,\n      renderLoading: function renderLoading() {\n        return _jsx(View, {\n          style: {\n            flex: 1\n          },\n          children: _jsx(Loading, {})\n        });\n      }\n    })]\n  });\n};\nexport default NewsViewer;\nvar styles = StyleSheet.create({});","map":{"version":3,"names":["React","useState","WebView","HeaderNavigate","useRoute","Loading","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","NewsViewer","route","uri","params","shouldStartLoadWithRequest","event","url","children","source","scrollEnabled","onShouldStartLoadWithRequest","maximumZoomScale","minimumZoomScale","startInLoadingState","renderLoading","View","style","flex","styles","StyleSheet","create"],"sources":["D:/RetroSoft official/license-checker-app/client/components/stack screens/NewsViewer.js"],"sourcesContent":["import { StyleSheet, Text, View } from \"react-native\";\r\nimport React, { useState } from \"react\";\r\nimport { WebView } from \"react-native-webview\";\r\nimport HeaderNavigate from \"../HeaderNavigate\";\r\nimport { useRoute } from \"@react-navigation/native\";\r\nimport Loading from \"../utils/Loading\";\r\n\r\nconst NewsViewer = () => {\r\n  const route = useRoute();\r\n  const { uri } = route.params;\r\n  const shouldStartLoadWithRequest = (event) => {\r\n    // You can add logic here to control which URLs are allowed to load.\r\n    // For example, only allow the initial URL to load and block others.\r\n    return event.url === uri;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <HeaderNavigate />\r\n      <WebView\r\n        source={{ uri }}\r\n        scrollEnabled={true} // Allow scrolling\r\n        onShouldStartLoadWithRequest={shouldStartLoadWithRequest}\r\n        maximumZoomScale={1} // Set maximum zoom level\r\n        minimumZoomScale={1} // Set minimum zoom level\r\n        startInLoadingState={true}\r\n        renderLoading={() => (\r\n          <View style={{ flex: 1 }}>\r\n            <Loading />\r\n          </View>\r\n        )}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NewsViewer;\r\n\r\nconst styles = StyleSheet.create({});\r\n"],"mappings":";;;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,OAAO,QAAQ,sBAAsB;AAC9C,OAAOC,cAAc;AACrB,SAASC,QAAQ,QAAQ,0BAA0B;AACnD,OAAOC,OAAO;AAAyB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEvC,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAA,EAAS;EACvB,IAAMC,KAAK,GAAGT,QAAQ,CAAC,CAAC;EACxB,IAAQU,GAAG,GAAKD,KAAK,CAACE,MAAM,CAApBD,GAAG;EACX,IAAME,0BAA0B,GAAG,SAA7BA,0BAA0BA,CAAIC,KAAK,EAAK;IAG5C,OAAOA,KAAK,CAACC,GAAG,KAAKJ,GAAG;EAC1B,CAAC;EAED,OACEH,KAAA,CAAAF,SAAA;IAAAU,QAAA,GACEZ,IAAA,CAACJ,cAAc,IAAE,CAAC,EAClBI,IAAA,CAACL,OAAO;MACNkB,MAAM,EAAE;QAAEN,GAAG,EAAHA;MAAI,CAAE;MAChBO,aAAa,EAAE,IAAK;MACpBC,4BAA4B,EAAEN,0BAA2B;MACzDO,gBAAgB,EAAE,CAAE;MACpBC,gBAAgB,EAAE,CAAE;MACpBC,mBAAmB,EAAE,IAAK;MAC1BC,aAAa,EAAE,SAAAA,cAAA;QAAA,OACbnB,IAAA,CAACoB,IAAI;UAACC,KAAK,EAAE;YAAEC,IAAI,EAAE;UAAE,CAAE;UAAAV,QAAA,EACvBZ,IAAA,CAACF,OAAO,IAAE;QAAC,CACP,CAAC;MAAA;IACP,CACH,CAAC;EAAA,CACF,CAAC;AAEP,CAAC;AAED,eAAeO,UAAU;AAEzB,IAAMkB,MAAM,GAAGC,UAAU,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}