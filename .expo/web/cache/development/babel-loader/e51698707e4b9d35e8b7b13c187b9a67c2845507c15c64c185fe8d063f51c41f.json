{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar getData = function () {\n  var _ref = _asyncToGenerator(function* (name) {\n    var encodedInput = encodeURIComponent(name);\n    try {\n      var response = yield fetch(`http://192.168.0.104:3000/companyhouse/${encodedInput}`);\n      if (!response.ok) {\n        throw new Error(\"Network request failed\");\n      }\n      var json = yield response.json();\n      return json;\n    } catch (error) {\n      console.error(\"Error fetching dummy JSON:\", error.message);\n    }\n  });\n  return function getData(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar capitalizeFirstLetter = function capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\nvar capitalizeEachWord = function capitalizeEachWord(sentence) {\n  return sentence.split(\" \").map(function (word) {\n    return capitalizeFirstLetter(word);\n  }).join(\" \");\n};\nvar getAdditoinalInfo = function () {\n  var _ref2 = _asyncToGenerator(function* (name) {\n    var response = yield getData(name);\n    var data = response == null ? void 0 : response.data.items;\n    var uppercase = name.toUpperCase();\n    var lowercase = name.toLowerCase();\n    var capitalizedSentence = capitalizeEachWord(name);\n    for (var i = 0; i < data.length; i++) {\n      var title = data[i].title;\n      if (title === uppercase || title === lowercase || title === capitalizedSentence) {\n        var status = data[i].company_status;\n        var address_snippet = data[i].address_snippet;\n        return {\n          status: status,\n          address_snippet: address_snippet\n        };\n      }\n    }\n    return null;\n  });\n  return function getAdditoinalInfo(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var companyHouseSearch = function () {\n  var _ref3 = _asyncToGenerator(function* (item) {\n    var additonalInfo = null;\n    var name = item[\"Organisation Name\"];\n    var csvResult = item;\n    additonalInfo = yield getAdditoinalInfo(name);\n    if (csvResult) {\n      if (additonalInfo === null) {\n        return {\n          company_name: csvResult[\"Organisation Name\"],\n          address: `${csvResult[\"Town/City\"]}, ${csvResult[\"County\"]}`,\n          license_tier: `${csvResult[\"Type & Rating\"]}, ${csvResult[\"Route\"]}`,\n          status: null\n        };\n      } else {\n        return {\n          company_name: csvResult[\"Organisation Name\"],\n          address: additonalInfo[\"address_snippet\"],\n          license_tier: `${csvResult[\"Type & Rating\"]}, ${csvResult[\"Route\"]}`,\n          status: additonalInfo[\"status\"]\n        };\n      }\n    }\n  });\n  return function companyHouseSearch(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["getData","_ref","_asyncToGenerator","name","encodedInput","encodeURIComponent","response","fetch","ok","Error","json","error","console","message","_x","apply","arguments","capitalizeFirstLetter","str","charAt","toUpperCase","slice","capitalizeEachWord","sentence","split","map","word","join","getAdditoinalInfo","_ref2","data","items","uppercase","lowercase","toLowerCase","capitalizedSentence","i","length","title","status","company_status","address_snippet","_x2","companyHouseSearch","_ref3","item","additonalInfo","csvResult","company_name","address","license_tier","_x3"],"sources":["D:/RetroSoft official/license-checker-app/client/helper/companyHouseSearch.js"],"sourcesContent":["const getData = async (name) => {\r\n  const encodedInput = encodeURIComponent(name);\r\n  try {\r\n    const response = await fetch(\r\n      `http://192.168.0.104:3000/companyhouse/${encodedInput}`\r\n    );\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Network request failed\");\r\n    }\r\n\r\n    const json = await response.json();\r\n    return json;\r\n  } catch (error) {\r\n    console.error(\"Error fetching dummy JSON:\", error.message);\r\n  }\r\n};\r\n\r\nconst capitalizeFirstLetter = (str) => {\r\n  return str.charAt(0).toUpperCase() + str.slice(1);\r\n};\r\nconst capitalizeEachWord = (sentence) => {\r\n  return sentence\r\n    .split(\" \")\r\n    .map((word) => capitalizeFirstLetter(word))\r\n    .join(\" \");\r\n};\r\n\r\nconst getAdditoinalInfo = async (name) => {\r\n  const response = await getData(name);\r\n  const data = response?.data.items;\r\n  let uppercase = name.toUpperCase();\r\n  let lowercase = name.toLowerCase();\r\n  let capitalizedSentence = capitalizeEachWord(name);\r\n\r\n  // return response;\r\n  for (let i = 0; i < data.length; i++) {\r\n    let title = data[i].title;\r\n    if (\r\n      title === uppercase ||\r\n      title === lowercase ||\r\n      title === capitalizedSentence\r\n    ) {\r\n      const status = data[i].company_status;\r\n      const address_snippet = data[i].address_snippet;\r\n\r\n      return { status, address_snippet };\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\nexport const companyHouseSearch = async (item) => {\r\n  let additonalInfo = null;\r\n  const name = item[\"Organisation Name\"];\r\n  const csvResult = item;\r\n  additonalInfo = await getAdditoinalInfo(name);\r\n\r\n  // expected types of json:\r\n  // 1. csvResult.length === 1 , additonalInfo found / not found\r\n  // 2. csvResult.length > 1, additonalInfo === null,\r\n  // 3. csvResult.length === 0,additonalInfo === null\r\n\r\n  if (csvResult) {\r\n    if (additonalInfo === null) {\r\n      // do something\r\n      return {\r\n        company_name: csvResult[\"Organisation Name\"],\r\n        address: `${csvResult[\"Town/City\"]}, ${csvResult[\"County\"]}`,\r\n        license_tier: `${csvResult[\"Type & Rating\"]}, ${csvResult[\"Route\"]}`,\r\n        status: null,\r\n      };\r\n    } else {\r\n      //do something\r\n      return {\r\n        company_name: csvResult[\"Organisation Name\"],\r\n        address: additonalInfo[\"address_snippet\"],\r\n        license_tier: `${csvResult[\"Type & Rating\"]}, ${csvResult[\"Route\"]}`,\r\n        status: additonalInfo[\"status\"],\r\n      };\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}